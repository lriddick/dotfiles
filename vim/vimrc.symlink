if has('vim_starting')
  set nocompatible               " Be iMproved

  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Initial editor / document settings
:inoremap jj <Esc>
let mapleader=","                " Leader as ,
set cursorline
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set number
set list
set listchars=tab:→→\,eol:¬

noremap <Leader>vim :e ~/.vimrc<CR>
noremap <Leader>tmux :e ~/.tmux.conf<CR>
noremap <Leader>sws :StripWhitespace<CR>

" ================================== PLUGINS ==================================

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

" UI / Editing
NeoBundle 'bling/vim-airline'
NeoBundle 'tpope/vim-vinegar'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'flazz/vim-colorschemes'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'editorconfig/editorconfig-vim'
NeoBundle 'Lokaltog/vim-easymotion'

" Syntax highlighting / auto-complete
NeoBundle 'ntpeters/vim-better-whitespace'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'ervandew/supertab'
NeoBundle 'nosami/OmniSharp'
NeoBundle 'OrangeT/vim-csharp'

" Source Control
NeoBundle 'tpope/vim-fugitive'             " Git Integration
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'wakatime/vim-wakatime'

" Data
NeoBundle 'vim-scripts/dbext.vim'

NeoBundle 'vim-scripts/tail-bundle'

" Productivity
"NeoBundle 'farseer90718/vim-taskwarrior'

" Async Processing
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'ahw/vim-hooks'

let vimproc_updcmd = has('win64') ?
      \ 'tools\\update-dll-mingw 64' : 'tools\\update-dll-mingw 32'
execute "NeoBundle 'Shougo/vimproc.vim'," . string({
      \ 'build' : {
      \     'windows' : vimproc_updcmd,
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ })

" All Bundles must be added before the following line
call neobundle#end()

filetype plugin indent on

NeoBundleCheck

" =================================== THEME ==================================

set t_Co=256
set background=dark
colorscheme zenburn
"highlight Normal ctermbg=NONE
"highlight nonText ctermbg=NONE

if &term =~ '256color'
    " disable Background Color Erase (BCE) so that color schemes
    " render properly when inside 256-color tmux and GNU screen.
    " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

let g:airline_powerline_fonts = 1
let g:airline_left_sep=''
let g:airline_right_sep=''
set laststatus=2

" =================================== SYNTAX ==================================

autocmd BufRead,BufNewFile *.spark set filetype=aspnet.html syntax=aspx

" ================================ DB CONFIG ==================================
try
  source ~/.vimrc-dbext
catch
  " :echo "No database connection defined"
endtry
" ============================== UNITE CONFIG ==================================

let g:unite_prompt              = '➤ '

" Recently Edited
nnoremap <silent> <Leader>m :Unite -buffer-name=recent -winheight=10 file_mru<cr>

" Open Buffers
nnoremap <Leader>b :Unite -buffer-name=buffers -winheight=10 buffer<cr>

" Application Search
nnoremap <Leader>f :Unite grep:.<cr>

noremap <Leader><space>f :Unite file_rec/async<cr>
noremap <Leader><space>l :Unite locate<cr>
noremap <Leader><space>s :Unite source<cr>

" CtrlP style search
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#source('file_rec/async','sorters','sorter_rank')
" replacing unite with ctrl-p
nnoremap <silent> <C-p> :Unite -start-insert -buffer-name=files -winheight=10 file_rec/async<cr>

" CtrlP custom ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$\|public/uploads$\|venv$\|node_modules$\|packages$',
  \ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
  \ }

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsExpandTrigger="<c-j>"

nnoremap <F5> :Dispatch!<CR>

" ============================== OMNISHARP CONFIG ==============================
"let g:OmniSharp_server_type = 'roslyn'
"Set the type lookup function to use the preview window instead of the status
"line
"let g:OmniSharp_typeLookupInPreview = 1
let g:OmniSharp_selector_ui = 'unite'

"Timeout in seconds to wait for a response from the server
let g:OmniSharp_timeout = 1

"Showmatch significantly slows down omnicomplete
"when the first match contains parentheses.
set noshowmatch

"Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

"Super tab settings
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
let g:SuperTabDefaultCompletionTypeDiscovery = ["&omnifunc:<c-x><c-o>","&completefunc:<c-x><c-n>"]
let g:SuperTabClosePreviewOnPopupClose = 1

"don't autoselect first item in omnicomplete, show if only one item (for preview)
"remove preview if you don't want to see any documentation whatsoever.
set completeopt=longest,menuone,preview
" Fetch full documentation during omnicomplete requests.
" There is a performance penalty with this (especially on Mono)
" By default, only Type/Method signatures are fetched. Full documentation can still be fetched when
" you need it with the :OmniSharpDocumentation command.
" let g:omnicomplete_fetch_documentation=1

" "Move the preview window (code documentation) to the bottom of the screen, so it doesn't move the code!
"You might also want to look at the echodoc plugin
set splitbelow

" Synchronous build (blocks Vim)
" autocmd FileType cs nnoremap <F5> :wa!<cr>:OmniSharpBuild<cr>
" Builds can also run asynchronously with vim-dispatch installed
 autocmd FileType cs nnoremap <leader>osb :wa!<cr>:OmniSharpBuildAsync<cr>

" The following commands are contextual, based on the current cursor position.

autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<cr>
nnoremap <leader>fi :OmniSharpFindImplementations<cr>
nnoremap <leader>ft :OmniSharpFindType<cr>
nnoremap <leader>fs :OmniSharpFindSymbol<cr>
nnoremap <leader>fu :OmniSharpFindUsages<cr>
nnoremap <leader>fm :OmniSharpFindMembers<cr>
" cursor can be anywhere on the line containing an issue for this one
nnoremap <leader>x  :OmniSharpFixIssue<cr>
nnoremap <leader>fx :OmniSharpFixUsings<cr>
nnoremap <leader>tt :OmniSharpTypeLookup<cr>
nnoremap <leader>dc :OmniSharpDocumentation<cr>
"navigate up by method/property/field
autocmd FileType cs nnoremap <C-K> :OmniSharpNavigateUp<cr>
"navigate down by method/property/field
autocmd FileType cs nnoremap <C-J> :OmniSharpNavigateDown<cr>

" Get Code Issues and syntax errors
let g:syntastic_cs_checkers = ['syntax', 'issues']
"let g:syntastic_cs_checkers = ['code_checker']
autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

"show type information automatically when the cursor stops moving
"autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()
" this setting controls how long to pause (in ms) before fetching type / symbol information.
set updatetime=500
" Remove 'Press Enter to continue' message when type information is longer than one line.
set cmdheight=2

" Contextual code actions (requires CtrlP)
nnoremap <leader><space> :OmniSharpGetCodeActions<cr>
" Run code actions with text selected in visual mode to extract method
vnoremap <leader><space> :call OmniSharp#GetCodeActions('visual')<cr>

" rename with dialog
nnoremap <leader>nm :OmniSharpRename<cr>
nnoremap <F2> :OmniSharpRename<cr>
" rename without dialog - with cursor on the symbol to rename... ':Rename newname'
command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

" Force OmniSharp to reload the solution. Useful when switching branches etc.
nnoremap <leader>rl :OmniSharpReloadSolution<cr>
nnoremap <leader>cf :OmniSharpCodeFormat<cr>
" Load the current .cs file to the nearest project
nnoremap <leader>tp :OmniSharpAddToProject<cr>
" Automatically add new cs files to the nearest project on save
"autocmd BufWritePost *.cs call OmniSharp#AddToProject()
" (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution
nnoremap <leader>ss :OmniSharpStartServer<cr>
nnoremap <leader>sp :OmniSharpStopServer<cr>

" Add syntax highlighting for types and interfaces
nnoremap <leader>th :OmniSharpHighlightTypes<cr>
"Don't ask to save when changing buffers (i.e. when jumping to a type definition)
set hidden

